import Cookies from "js-cookie";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";
import { getProductById } from "../../src/routes/productData";
import { getData } from "../../src/routes/userData";
import { useDispatch } from "react-redux";
import { setUser } from "../../store/index";
import Head from "next/head";
import { addToBasket } from "../../src/routes/userBasket";
import { useSelector } from "react-redux";
import ProductQuestions from "../../component/ProductQuestions/ProductQuestions";
import ProductReviews from "../../component/ProductReviews/ProductReviews";
const ProductId = ({ data }) => {
  const user = useSelector((state) => state.setUser);
  const [tab, setTab] = useState(0);
  const cookie = Cookies.get("userAuth");
  const dispatch = useDispatch();
  const router = useRouter();
  const { id } = router.query;
  const [showTab, setShowTab] = useState(0);
  useEffect(() => {
    if (cookie === undefined) {
      router.push("../signin");
    } else {
      setUserInRedux();
    }

    if (data.err) {
      alert(data.err);
      return;
    }
  }, []);

  // set User in redux
  const setUserInRedux = async () => {
    const response = await getData("auth/getuser", cookie);
    dispatch(setUser(response.data));
  };

  // add product to baset
  const addProductToBasket = async () => {
    const checkItem = user.basket.filter((item) => {
      return item._id === data._id;
    });
    if (checkItem.length === 0) {
      const res = await addToBasket("basket/addtobasket", {
        userId: user._id,
        data: { ...data.product, quantity: 1 },
      });
      if (res.err) {
        alert(res.err);
      }
      dispatch(setUser(res.userdata));
      alert("Item added");
    } else {
      alert("Item is already is in your basket");
    }
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css"
          integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p"
          crossorigin="anonymous"
        />
      </Head>
      <div className="product">
        <div className="product_image_container">
          <img
            src={data.product.images[tab].url}
            className="thumbnail_image"
            alt=""
          />
          <div className="image_box">
            {data.product.images.map((item, index) => {
              return (
                <img
                  onClick={() => setTab(index)}
                  onMouseMove={() => setTab(index)}
                  src={item.url}
                  className={tab === index && `tab_image`}
                  alt=""
                />
              );
            })}
          </div>
        </div>
        <div className="product_detail_container">
          <h3 className="product_title">{data.product.title}</h3>
          <p className="description">{data.product.description}</p>
          <p className="product_rating">
            <i className="fas fa-star"></i>
            <i className="fas fa-star"></i>
            <i className="fas fa-star"></i>
          </p>
          <p className="product_price">
            Price : <span>$ 3</span>
          </p>
          <p className="product_original_price">
            Original Price : <span>$ 5.6</span>
          </p>
          <div className="action_button">
            <button className="btn_now">Buy Now</button>
            <button onClick={addProductToBasket} className="btn_addtocart">
              Add To Cart
            </button>
          </div>
          <div className="tabs">
            <div className="tab_header">
              <p onClick={() => setShowTab(0)} className="questions_text">
                Questions
              </p>
              <p onClick={() => setShowTab(1)} className="reviews_text">
                Reviews
              </p>
            </div>
            <div className="tab_container">
              {showTab === 0 ? (
                <ProductQuestions data={data.product} />
              ) : showTab === 1 ? (
                <ProductReviews data={data.product} />
              ) : (
                ""
              )}
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default ProductId;
export async function getServerSideProps(context) {
  const response = await getProductById(
    "product/getproductbyid",
    context.query.id
  );
  return {
    props: {
      data: response,
    },
  };
}
